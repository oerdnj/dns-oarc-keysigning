{
  "name": " Keysigning in Buenos Aires",
  "tagline": "",
  "body": "## Where?\r\n\r\nAs part of the DNS-OARC 24 and IETF 95 Conference in Buenos Aires, Argentina there will be OpenPGP (pgp/gpg) keysignings.\r\n\r\n## When?\r\n\r\nOndřej Surý will announce the time and venue of a discussion/information session about the keysigning during DNS-OARC 24 (and IETF) in particular and modern cryptography in general.  It will be followed by a number of keysignings of small groups of people.\r\n\r\n## What is keysigning and why do it\r\n\r\nA keysigning party or meeting is a get-together of at least two individuals who use the PGP encryption system with the purpose of allowing them to sign each others keys. Keysigning parties serve to extend the web of trust (WoT) to a great degree. A useful metric of the WoT is the mean shortest distance (MSD) of a key.\r\n\r\nPlease read chapters one and two of the GnuPG Keysigning Party HOWTO (note: we are doing the party differently, so the other chapters do not apply completely).\r\n\r\n**IMPORTANT**: The keysigning party aims to verify that the person matches the key, so it doesn't make sense to validate various organizational keys.  Thereby I am going to reject any non-personal keys (f.e. something like \"DNS-OARC Key\").\r\n\r\n## Don't you have a strong key yet?\r\n\r\nWe should be moving to GPG keys with stronger ones using SHA256 or better. Please read f.e.:\r\n\r\nhttps://lists.debian.org/debian-devel-announce/2010/09/msg00003.html\r\n\r\nThe process to create a new key is documented at http://keyring.debian.org/creating-key.html.\r\n\r\nIf you plan to migrate your WoT, you should read \"HOWTO prep for migration off of SHA-1 in OpenPGP\" at https://www.debian-administration.org/users/dkg/weblog/48 by dkg.\r\n\r\nYou are also welcome to submit a second key using Ed25519 algorithm, read f.e.: http://www.gniibe.org/memo/software/gpg/keygen-25519.html\r\n\r\nYou will need at least GnuPG version 2.1.0 to have Ed25519 support, and it's often found as gpg2 command on various Linux distributions.  You can check your GnuPG version using `--version` argument:\r\n\r\n    $ gpg2 --version\r\n    gpg (GnuPG) 2.1.11\r\n    libgcrypt 1.6.5\r\n    Copyright (C) 2016 Free Software Foundation, Inc.\r\n    License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>\r\n    This is free software: you are free to change and redistribute it.\r\n    There is NO WARRANTY, to the extent permitted by law.\r\n    \r\n    Home: ~/.gnupg\r\n    Supported algorithms:\r\n    Pubkey: RSA, ELG, DSA, ECDH, ECDSA, EDDSA\r\n    Cipher: IDEA, 3DES, CAST5, BLOWFISH, AES, AES192, AES256, TWOFISH,\r\n            CAMELLIA128, CAMELLIA192, CAMELLIA256\r\n    Hash: SHA1, RIPEMD160, SHA256, SHA384, SHA512, SHA224\r\n    Compression: Uncompressed, ZIP, ZLIB, BZIP2\r\n\r\n    $ gpg1 --version\r\n    gpg (GnuPG) 1.4.20\r\n    Copyright (C) 2015 Free Software Foundation, Inc.\r\n    License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>\r\n    This is free software: you are free to change and redistribute it.\r\n    There is NO WARRANTY, to the extent permitted by law.\r\n    \r\n    Home: ~/.gnupg\r\n    Supported algorithms:\r\n    Pubkey: RSA, RSA-E, RSA-S, ELG-E, DSA\r\n    Cipher: IDEA, 3DES, CAST5, BLOWFISH, AES, AES192, AES256, TWOFISH,\r\n            CAMELLIA128, CAMELLIA192, CAMELLIA256\r\n    Hash: MD5, SHA1, RIPEMD160, SHA256, SHA384, SHA512, SHA224\r\n    Compression: Uncompressed, ZIP, ZLIB, BZIP2\r\n\r\n## Check your key and fix any problem with your key\r\n\r\nPlease read the document \"OpenPGP Best Practices\" by dkg which is available at https://help.riseup.net/en/security/message-security/openpgp/best-practices. Its OpenPGP key checks have been implemented by Clint Adams (clint) in the Debian package hopenpgp-tools and dkg's recommended settings has been put together in a gpg.conf file by Jacob Appelbaum (error). Please check your key with clint's hokey lint command and use error's gpg.conf file as explained in dkg's document.\r\n\r\n## How will the keysigning happen?\r\n\r\nThe keysignings will be based on the Efficient Group Key Signing Method by Len Sassaman and Phil Zimmermann which is a protocol to do keysignings in a way that is faster than the way many people may be familiar with.\r\n\r\nThe keysigning steps follow.\r\n\r\n* Please note that having multiple keys isn't a requirement. If you have one key to be signed, adjust the examples below from two keys to just one key. \r\n\r\n* Revoke all non-reacheable or no longer valid uids. \r\n\r\n* Update GnuPG to use SHA2 in preference to SHA1. Use error's gpg.conf file (see above) or read the information under \"Update ~/.gnupg/gpg.conf\" at http://keyring.debian.org/creating-key.html. Don't forget to update ~/.caff/gnupghome/gpg.conf as well, if you use caff for signing keys, otherwise your signatures will be SHA1. \r\n\r\n* Cross sign your keys and upload them to a key server, if you haven't done so yet.\r\n\r\nExample with two keys 0xfedcba98 and 0x76543210 and uploading to a key server: \r\n\r\n    gpg --local-user 0xfedcba98 --edit 0x76543210 sign\r\n    gpg --local-user 0x76543210 --edit 0xfedcba98 sign \r\n    gpg --keyserver keys.gnupg.net --send-keys 0xfedcba98 0x76543210 \r\n\r\n* Send your ascii armored, cleaned, minimized and clear-signed public keys to ksp-ba@rfc1925.org no later than 23:59 UTC/GMT/Zulu on Sunday 29th of March, 2016. Multiple cross-signed keys per armor are just fine. The signatures will prove the owner of the keys controls the private keys. \r\n\r\n  * Please check that your version of gpg does support the export-clean option. \r\n\r\n  * Please do not encrypt your email. \r\n  * Please do not send attachments. \r\n  * Please do not encode your email. \r\n\r\nExample with two keys 0xfedcba98 and 0x76543210, signature is made with both keys 0xfedcba98 and 0x76543210: \r\n\r\n    gpg --armor --export-options export-clean,export-minimal --export 0xfedcba98 0x76543210 > publickeyblock\r\n \r\nThen clear-sign publickeyblock with your keys 0xfedcba98 and 0x76543210 creating publickeyblock.asc: \r\n\r\n    gpg --local-user 0xfedcba98 --clearsign --local-user 0x76543210 --clearsign publickeyblock \r\n\r\nThen email publickeyblock.asc as so: \r\n\r\n    mail -s \"KeySigning Party @ DNS-OARC\" ksp-ba@rfc1925.org < publickeyblock.asc \r\n\r\nSame example as a one-liner: \r\n\r\n    gpg --armor --export-options export-clean,export-minimal --export 0xfedcba98 0x76543210 | gpg --local-user 0xfedcba98 --clearsign --local-user 0x76543210 --clearsign | mail -s \"KeySigning Party in Buenos Aires\" ksp-ba@rfc1925.org \r\n\r\nAnother one-liner:\r\n\r\n    (echo -e \"To: ksp-ba@rfc1925.org\\nFrom: Your Full Name <name@example.org>\\nBcc: name@example.org\\nSubject: KeySigning Party in Buenos Aires\\n\"; gpg --armor --export-options export-clean,export-minimal --export 0xfedcba98 0x76543210 | gpg --local-user 0xfedcba98 --clearsign --local-user 0x76543210 --clearsign) | sendmail -t \r\n\r\nAnother one-liner (by Philip Hands): \r\n\r\n    ( KEYS=\"0xfedcba98 0x76543210\" ; \\\r\n    gpg --armor --export-options export-clean,export-minimal --export $KEYS | \\\r\n    gpg $(for k in $KEYS; do echo \"--local-user $k --clearsign\"; done) | \\\r\n    mail -s \"KeySigning Party in Buenos Aires\" anibal@debian.org \\\r\n    ) \r\n\r\n* Your keys will be processed manually and if the submitted keys are valid, an email will be sent back to you and the key IDs will be listed at TODO. If you find an error write immediately to ondrej.sury@nic.cz. \r\n\r\nAt TODO, if you want your name linked to your photo, send an email to anibal@debian.org. \r\n\r\nOn Wednesday 31. March, 2015 you will be able to fetch the complete keyring (ksp-ba.gpg.bz2) with all the keys that were submitted along with a text file ([ksp-ba.txt](https://raw.githubusercontent.com/oerdnj/dns-oarc-keysigning/master/ksp-ba.txt)) giving the fingerprint of each key on the ring. \r\n\r\nAt TODO both the keyring and text files will have corresponding files with their SHA256 checksums. The SHA256 files will be signed with public key 0x0C99B70EF4FCBB07, which can be downloaded from keyring.debian.org or other public keyservers. \r\n\r\nTo verify the signature of the SHA256 files, download ondrej's key from db.debian.org, e.g.: \r\n\r\n    finger ondrej/key@db.debian.org | gpg --import \r\n\r\nAnd then run gpg with the verify option (using ksp-dc15.txt.sha256.asc as an example): \r\n\r\n    gpg --verify ksp-ba.txt.sha256.asc \r\n\r\n* Verify that the fingerprints of your keys in ksp-dc15.txt are correct. Also compute the SHA256 hash of ksp-ba.txt. One way to do this is with sha256sum invoked as follows: \r\n\r\n    sha256sum ksp-ba.txt \r\n\r\n* Bring the hash you computed and a hardcopy of [ksp-ba.txt](https://raw.githubusercontent.com/oerdnj/dns-oarc-keysigning/master/ksp-ba.txt) to Buenos Aires. \r\n * It is very important that you have verified at home the fingerprints of your keys on the hardcopy. \r\n * It is also very important that you have computed the hash at home. \r\n\r\n* The SHA256 hash of [ksp-ba.txt](https://raw.githubusercontent.com/oerdnj/dns-oarc-keysigning/master/ksp-ba.txt) will be announced during the discussion/information session. Verify that the hashes match what you computed. This guarantees that all participants are working from the same list of keys. \r\n\r\n* During DNS-OARC 24 and IETF 95, look for keysigning participants during the conference. \r\n\r\n        For each participant: \r\n\r\n  1. Compare the hash you computed with the other participant (it will be recited loudly).\r\n  2. Ask if the other participant's gpg fingerprints on the hardcopy are correct.\r\n  3. Verify each other's identity by checking preferably a passport or, alternatively, some other form of government issued ID. Please don't show very old, doubtful or easy-to-fake documents as people will not sign your key if you do so.\r\n  4. If you are satisfied with the identification, mark on your hardcopy that the other participant's gpg fingerprints are correct and the other participant has been identified. \r\n\r\n* Later that evening, or perhaps when you get home, you can sign the keys in [ksp-ba.txt](https://raw.githubusercontent.com/oerdnj/dns-oarc-keysigning/master/ksp-ba.txt) which you were able to verify and identify. \r\n\r\nPlease use caff to sign keys, one of the scripts of pgp-tools. The scripts are also available as the debian package signing-party. \r\n\r\n## Downloads\r\n\r\n* [ksp-ba.txt](https://raw.githubusercontent.com/oerdnj/dns-oarc-keysigning/master/ksp-ba.txt) - List of participants (text file). \r\n* [ksp-ba.gpg](https://raw.githubusercontent.com/oerdnj/dns-oarc-keysigning/master/ksp-ba.gpg) - Participating keys (keyring). \r\n\r\n## Summary\r\n\r\nWhat to bring with you\r\n\r\n* A printout of [ksp-ba.txt](https://raw.githubusercontent.com/oerdnj/dns-oarc-keysigning/master/ksp-ba.txt); check that your fingerprints are correct. \r\n* A pen. \r\n* The SHA256 hash you made of [ksp-ba.txt](https://raw.githubusercontent.com/oerdnj/dns-oarc-keysigning/master/ksp-ba.txt) so that we can ensure we are all working with the same copy. \r\n* Some form of government issued ID (passport or similar). \r\n* If this is your first keysigning, a copy of this web page and linked documents might be useful. \r\n\r\n## Questions\r\n\r\nIf you have questions please send them to ondrej.sury@nic.cz.\r\n\r\n## Thanks\r\n\r\nSpecial thanks goes to Benjamin Mako Hill who provided the scripts and text used at DebConf4, Peter Palfrader who provided the scripts and text used at DebConf3 and LinuxTag (2003 and 2004) whose reuse made putting together this keysigning easy and possible, and Daniel Kahn Gillmor and Anibal Monsalve Salazar for doing this at DebConf15.",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}